<?php
/**
 * Created by PhpStorm.
 * User: Anton
 * Date: 04.03.2020
 * Time: 20:10
 */

namespace Rate;

trait Gps {
    public function addGps($price, $hours)
    {
        $this->price += $hours * 15;
        return $this->price;
    }
}

trait AddDriver {
    public function addDriver($price)
    {
        $this->price += 100;
        return $this->price;
    }
}

interface iRate {
    public function getPrice($distance, $hours, $age);
}

abstract class Rate implements iRate
{
    use addDriver;
    use Gps;
    protected $pricePerMinute = 0;
    protected $pricePerKilometers = 0;
    protected $price = 0;
    protected $driver = 0;
    protected $gps = 0;

    public function __construct($driver = 0, $gps = 0)
    {
        $this->driver = $driver;
        $this->gps = $gps;
    }

    public function getPrice($distance, $hours, $age)
    {
        if ($age < 18 || $age > 65) {
            echo "Вы не подходите";
        } elseif ($age > 17 && $age < 22) {
            $this->price += ($distance * $this->pricePerKilometers + ($hours*60) * $this->pricePerMinute) * 1.1;
        } else {
            $this->price += $distance * $this->pricePerKilometers + ($hours*60) * $this->pricePerMinute;
        }
        if ($this->driver == 1) {
            $this->addDriver($this->price);
        }
        if ($this->gps == 1) {
            $this->addGps($this->price, $hours);
        }
        echo $this->price . ' руб';
    }
}

class RateBase extends Rate {
    protected $pricePerMinute = 3;
    protected $pricePerKilometers = 10;

    use AddDriver;

    public function getPrice($distance, $hours, $age)
    {
        echo 'Базовый: ';
        parent::getPrice($distance, $hours, $age); // TODO: Change the autogenerated stub
    }
}

class RateHours extends Rate{
    protected $pricePerHour = 200;

    public function getPrice($distance, $hours, $age)
    {
        $hours = ceil($hours);
        echo 'Почасовой: ';
        if ($age < 18 || $age > 65) {
            echo "Вы не подходите";
        } elseif ($age > 17 && $age < 22) {
            $this->price += ($distance * $this->pricePerKilometers + $hours * $this->pricePerHour) * 1.1;
        } else {
            $this->price += $distance * $this->pricePerKilometers + $hours * $this->pricePerHour;
        }
        if ($this->driver == 1) {
            $this->addDriver($this->price);
        }
        if ($this->gps == 1) {
            $this->addGps($this->price, $hours);
        }
        echo $this->price . ' руб';
    }
}

class RateDay extends Rate{
    protected $pricePerDay = 1000;
    protected $pricePerKilometers = 1;

    public function getPrice($distance, $hours, $age)
    {
        if ($hours > 24.5) {
            $hours += 24;
        }
        echo 'Посуточный: ';
        if ($age < 18 || $age > 65) {
            echo "Вы не подходите";
        } elseif ($age > 17 && $age < 22) {
            $this->price = ($distance * $this->pricePerKilometers + ($hours/24) * $this->pricePerDay) * 1.1;
        } else {
            $this->price = $distance * $this->pricePerKilometers + ($hours/24) * $this->pricePerDay;
        }
        if ($this->driver == 1) {
            $this->addDriver($this->price);
        }
        if ($this->gps == 1) {
            $this->addGps($this->price, $hours);
        }
        echo ceil($this->price) . ' руб';
    }
}

class RateStudent extends Rate{
    protected $pricePerMinute = 1;
    protected $pricePerKilometers = 4;

    public function getPrice($distance, $hours, $age)
    {
        if ($age > 25) {
            echo 'Вы не студент';
            die;
        }
        echo 'Студенческий: ';
        parent::getPrice($distance, $hours, $age); // TODO: Change the autogenerated stub
    }
}